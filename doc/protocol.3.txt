musicd protocol, version 3 (Working draft)
==========================================

Message syntax
==============
Messages are of following structure:

type
key1=value1
key2=value2

Components of message are separated by newlines (\n). The first line shall only
contain the message type, and following lines contain one key/value property
pair each. An empty line terminates a message (\n\n).

For every binary data property, of following syntax
key:=size
will follow size amount of bytes after the message's two terminating newlines.

List properties are comma separated values:
key=value1,value2


Definition format
==========
This specification uses following syntax for defining different message types:

messagetype (sender)
key1 type1 keywords1
key2 type2 keywords2

Keyword "required" is self-explanatory.

Following types are used:
* string
  UTF-8 encoded string which may contain any other Unicode character except
  newline (\n).
* integer
  Signed 32-bit integer value.
* floating
  Floating point value. Type such as double in C is sufficient for storing.
* timestamp
  Signed 64-bit integer value.
* id
  Unsigned 64-bit integer value.
* bytes
  Binary data.
* list(type)
  List of type.


Communication and error handling
================================
All client messages must generate an immediate reply from the server. The
server can also push messages - clients don't have to give the server any
response to them.

Any error, be it the client's protocol-incompliant message, client's invalid or
impossible request or server side error, will cause the server to send a
message of following structure.

error (server)
name string

In error condition, the server is not required to give the client any normal
reply to the message that triggered the error.


Initiating session
==================
When a client connects to a server, the server shall push following message:

musicd (server)
protocol integer required
codecs list(string)

Protocol defines protocol version used for communication. Optional property
codecs defines what codecs the server is able to transcode to on client's
request.


After this the client most likely must authorize itself. After the
authorization the client can begin sending requests normally.


Messages
========

auth (client)
user string required
password string required

auth (server)
[none]

Authenticates the user.


track (server)
id id required
path string
track integer
title string
artist string
album string
duration integer

One track entry generated by a query from the server.


search (client)
query string required

search (server)
[none]

Generates one message of type track for every track matching query.


randomid (client)
[none]

randomid (server)
id id required

Returns a valid random track id. If not implemented, id should be 0.


packet (server)
pts integer required
payload bytes required

One packet in track stream. PTS (Presentation Time Stamp) is in microseconds.


open (client)
id id required
codec string
bitrate integer

open (server)
codec string required
samplerate integer required
bitspersample integer required
channels integer required
extradata bytes
replaytrackgain floating
replaytrackpeak floating
replayalbumgain floating
replayalbumpeak floating

Opens a track for playing and closes any track already open.
Before the server replies, the server sends a track message for metadata
information.
If codec is set, server-side transcoding is requested. The codec must be one
reported by server when connecting. Absence of the codec field means no
transcoding is requested. Bitrate defines bitrate requested for server-side
transcoding. Server may or may not honor it.
The server starts pushing packet messages.
Reply may contain fields for replay gain information. The reference gain is
89 dB. Fields replay*gain contain gain difference from the source audio to
the reference level. Fields replay*peak contain highest digital sample value
in scale from 0 to 1.


seek (client)
position integer required

seek (server)
[none]

Seeks currently open track to position seconds from beginning of the track.

