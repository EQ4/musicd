musicd protocol, version 1 (Working draft)
==========================================

Messages are of following structure:

type
key1=value1
key2=value2

Components of message are separated by newlines (\n). The first line shall only
contain type of the message, and following lines contain one key/value property
pair each. An empty line terminates a message. For every binary data property,
of following syntax
key:=size

will follow size amount of bytes after the message's two terminating newlines.

All client messages must generate an immediate reply from the server. Server
can also push messages - clients don't have to give the server any response for
them.

Any error, be it client's protocol-incompliant message, client's invalid or
impossible request or server side error, will cause the server to send a
message of following structure.

error
name string

In error condition, server is not required to give client any normal reply for
message that triggered the error.

Connecting
==========

When a client connects to a server, the server shall push following message

musicd
protocol integer (required)

After this, most likely client must authorize itself. After this client may
generate requests normally.

Messages
=======

auth (client to server)
Request:
user string (required)
password string (required)
Reply:
[none]
Authenticates the user.

track (server to client)
id integer (required)
track integer
title string
artist string
album string
duration integer
One track entry generated by a query from the server.

search (client to server)
Request:
query string (required)
Reply:
[none]
Generates one message of type track for every track matching query.

packet (server to client)
pts integer (required)
payload bytes (required)
One packet in track stream. PTS (Presentation Time Stamp) is in microseconds.

open (client to server)
Request:
id integer (required)
Reply:
codec string (required)
samplerate integer (required)
bitspersample integer (required)
channels integer (required)
extradata bytes
Opens a track for playing and closes any track already open. Triggers the
server to push a track message describing the opened track. Starts pushing
messages of type packet.

seek (client to server)
Request:
position integer (required)
Reply:
[none]
Seeks currently open track to position seconds from beginning of the track.
